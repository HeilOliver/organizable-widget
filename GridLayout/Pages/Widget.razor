@using System.ComponentModel.DataAnnotations
@implements IDisposable

<div @ref="@element"
     class="widget @dragClass"
     style="grid-column-start: @(internalX + 1); grid-column-end: @(internalX + 1 + Width); grid-row-start: @(internalY + 1); grid-row-end: @(internalY + 1 + Height);"
     draggable="@CanMove"
     @ondragstart="StartDrag"
     @ondragend="EndDrag"
     ondragover="event.preventDefault();">
    @ChildContent

    <div class="frost-container">
        <div class="grip-icon"></div>
    </div>
</div>

@if (isDragging && false)
{
    <div class="ghost" style="left: @(ghostX)px; top: @(ghostY)px; width: @(ghostWidth)px; height: @(ghostHeight)px;">
        @if(GhostContent is not null)
        {
            @GhostContent
        }
        else
        {
            <div class="ghost content"></div>
        }
    </div>
}

@code {
    private int ghostX;
    private int ghostY;
    private int ghostWidth;
    private int ghostHeight;
    internal int internalWidth;
    private bool internalWidthChanged;
    internal int internalHeight;
    private bool internalHeightChanged;
    internal int internalX;
    private bool internalXChanged;
    internal int internalY;
    private bool internalYChanged;
    private ElementReference element;
    private DotNetObjectReference<Widget> objRef;
    private string dragClass;
    private bool isDragging;
    
    [CascadingParameter]
    public required WidgetContainer Container { get; set; }

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public EventCallback<int> XChanged { get; set; }
    
    [Parameter]
    public int Y { get; set; }
    
    [Parameter]
    public EventCallback<int> YChanged { get; set; }
    
    [Parameter]
    public int Width { get; set; } = 1;
    
    [Parameter]
    public EventCallback<int> WidthChanged { get; set; }
    
    [Parameter]
    public int Height { get; set; } = 1;
    
    [Parameter]
    public EventCallback<int> HeightChanged { get; set; }
    
    [Parameter]
    public bool CanMove { get; set; } = true;
    
    [Parameter]
    public bool CanResize { get; set; }
    
    [Parameter]
    [Required]
    public RenderFragment ChildContent { get; set; }
    
    [Parameter]
    public RenderFragment GhostContent { get; set; }
    
    [Inject]
    public IJSRuntime JsRuntime { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        internalX = X;
        internalY = Y;
        internalWidth = Width;
        internalHeight = Height;
    }

    protected override void OnInitialized()
    {
        internalX = X;
        internalY = Y;
        internalWidth = Width;
        internalHeight = Height;
        Container.Add(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
            return;
        
        objRef = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("setupDragHandler", element, Container.Ref, objRef);
    }

    public void Dispose()
    {
        Container.Remove(this);
        objRef?.Dispose();
    }
    
    private void StartDrag(DragEventArgs e)
    {
        isDragging = true;
        dragClass = "dragging";
        StateHasChanged();
    }

    private void EndDrag(DragEventArgs e) 
    {
        dragClass = string.Empty;
        isDragging = false;

        if (internalXChanged)
        {
            internalXChanged = false;
            XChanged.InvokeAsync(internalX);
        }
        
        if (internalYChanged)
        {
            internalYChanged = false;
            YChanged.InvokeAsync(internalY);
        }
        
        StateHasChanged();
    }
    
    [JSInvokable]
    public void HandleDrag(WidgetDragEvent args)
    {
        var columns = Container.Columns;
        var rows = Container.Rows;
    
        var columnWidth = args.Container.Width / columns;
        var rowHeight = args.Container.Height / rows;
    
        var newX = (int)Math.Floor(args.OffsetX / columnWidth);
        var newY = (int)Math.Floor(args.OffsetY / rowHeight);
    
        newX = Math.Max(0, newX);
        newY = Math.Max(0, newY);
    
        newX = Math.Min(newX, columns - Width);
        newY = Math.Min(newY, rows - Height);
        
        ghostX = (int) args.OffsetX;
        ghostY = (int) args.OffsetY;
        ghostWidth = (int) args.Widget.Width;
        ghostHeight = (int) args.Widget.Height;
        
        bool hasChanged = false;
        if (internalX != newX)
        {
            internalXChanged = true;
            internalX = newX;
            hasChanged = true;
        }
        
        if (internalY != newY)
        {
            internalYChanged = true;
            internalY = newY;
            hasChanged = true;
        }

        if (hasChanged)
            InvokeAsync(() => Container.WidgetCollisionCheck(this));
     
        StateHasChanged();
    }
    
    public void SetNewPosition(int newX, int newY)
    {
        internalX = newX;
        XChanged.InvokeAsync(internalX);
        
        internalY = newY;
        YChanged.InvokeAsync(internalY);
    }
}